{
  "Conversations": {
    "Slots": {
      "Interaction Model": {
        "interactionModel": {
          "languageModel": {
            "invocationName": "sandbox skill david",
            "intents": [
              {
                "name": "AMAZON.CancelIntent",
                "samples": []
              },
              {
                "name": "AMAZON.HelpIntent",
                "samples": []
              },
              {
                "name": "AMAZON.StopIntent",
                "samples": []
              },
              {
                "name": "HelloWorldIntent",
                "slots": [],
                "samples": [
                  "hello",
                  "how are you",
                  "say hi world",
                  "say hi",
                  "hi",
                  "say hello world",
                  "say hello"
                ]
              },
              {
                "name": "AMAZON.NavigateHomeIntent",
                "samples": []
              },
              {
                "name": "AMAZON.FallbackIntent",
                "samples": []
              }
            ],
            "types": [
              {
                "name": "size",
                "values": [
                  {
                    "name": {
                      "value": "small",
                      "synonyms": ["tiny"]
                    }
                  },
                  {
                    "name": {
                      "value": "regular",
                      "synonyms": ["average"]
                    }
                  },
                  {
                    "name": {
                      "value": "large",
                      "synonyms": ["gigantic", "huge", "big"]
                    }
                  }
                ]
              },
              {
                "name": "energy",
                "values": [
                  {
                    "name": {
                      "value": "low",
                      "synonyms": ["lazy", "calm", "chill"]
                    }
                  },
                  {
                    "name": {
                      "value": "normal",
                      "synonyms": ["medium"]
                    }
                  },
                  {
                    "name": {
                      "value": "high",
                      "synonyms": ["hi", "hyper", "excited"]
                    }
                  }
                ]
              },
              {
                "name": "temperament",
                "values": [
                  {
                    "name": {
                      "value": "family",
                      "synonyms": ["sweet", "nice", "friendly", "loving"]
                    }
                  },
                  {
                    "name": {
                      "value": "guard",
                      "synonyms": ["protector", "jerk", "angry", "mean", "mad", "aggressive"]
                    }
                  }
                ]
              },
              {
                "name": "stringLiteral",
                "values": [
                  {
                    "name": {
                      "value": "dummy value: literal API return entity"
                    }
                  }
                ]
              },
              {
                "name": "name",
                "values": [
                  {
                    "name": {
                      "value": "dummy"
                    }
                  }
                ]
              }
            ]
          }
        }
      },
      "getPetResult": {
        "createProp": "getPetResult",
        "props": ["temperament", "energy", "size", "name"]
      },
      "getDescResult": {
        "createProp": "getDescResult",
        "props": [{ "description": "stringLiteral" }]
      }
    },
    "API": {
      "getPet": {
        "arguments": ["temperament", "energy", "size"],
        "return": "getPetResult"
      },
      "getDesc": {
        "arguments": [{ "petResult": "getPetResult" }],
        "return": "getDescResult"
      }
    },
    "Responses": {
      "welcome": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Welcome to pet match. I can find the best dog for you. What are the two things you're looking for in a dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Welcome to pet match. I can find the best dog for you. What size of dog are you looking for?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Welcome to pet match. I can find the best dog for you. What temperament are you looking for in a dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguments": [""]
      },
      "provide_help": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "resources": [
            {
              "string": {
                "help": "For ideas of things to ask, find this skill in the Alexa App to see example phrases and a description of the skill. How can I help you?"
              }
            },
            {
              "when": "${environment.alexaLocale == 'de-DE'}",
              "string": {
                "help": "Wenn du nicht wei√üt was du fragen sollst  suche diesen Skill in der Alexa App. Dort findest du Beispielphrasen und eine Beschreibung des Skill. Wie kann ich dir helfen?"
              }
            }
          ],
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "contentType": "randomItem",
              "description": "Change 'type' or 'strategy' above to try different Component Types, like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "This is pet match. I can help you find the perfect pet for you. You can say, I want a large dog.",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ],
              "content": "@help"
            }
          }
        },
        "arguments": [""]
      },
      "request_temperament": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Would you like a family dog or a guard dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "I can filter for a family dog or a guard dog. Which do you prefer?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguments": [""]
      },
      "request_energy": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Would you prefer a high, normal, or low energy dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Do you friends describe you as high energy or low energy?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguments": [""]
      },
      "request_size": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Do you prefer tiny, small, regular, or large dogs?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Would you like a tiny, small, regular, or large dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                },
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "Are you interested in tiny, small, regular, or large dog?",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguments": [""]
      },
      "gotIt_getPet": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "I recommend a ${payload.getPetResult.name}.",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguements": ["getPetResult"]
      },
      "gotIt_getDesc": {
        "json": {
          "type": "APLA",
          "version": "0.8",
          "mainTemplate": {
            "parameters": ["payload"],
            "item": {
              "type": "Selector",
              "strategy": "randomItem",
              "description": "Change 'type' above to try different Selector Component Types like Sequencer",
              "items": [
                {
                  "type": "Speech",
                  "contentType": "text",
                  "content": "${payload.getDescResult.description}.",
                  "description": "Expand on 'items' array to add multiple prompts, use response template arguments by adding it to 'content' like this ${payload.input_argument_name} and add SSML by changing 'contentType' to 'SSML' and adding SSML to 'content' <amazon:effect name=\"whispered\">like that</amazon:effect>"
                }
              ]
            }
          }
        },
        "arguements": ["getDescResult"]
      }
    },
    "Utterances": {
      "inform_size": "size",
      "inform_energy": "energy",
      "inform_temperament": "temperament",
      "invoke_size": {
        "slots": ["size"],
        "utterances": ["I want a {size} dog."]
      },
      "invoke_energy": {
        "slots": ["energy"],
        "utterances": ["I want a {energy} dog."]
      },
      "invoke_temperament": {
        "slots": ["temperament"],
        "utterances": ["I want a {temperament} dog."]
      },
      "invoke_size_temperament": {
        "slots": ["size", "temperament"],
        "utterances": [
          "I want a {size} {temperament} dog.",
          "I want a {temperament} {size} dog.",
          1234567890.0987654321
        ]
      },
      "invoke_energy_size": {
        "slots": ["energy", "size"],
        "utterances": [
          "I want a {size} {energy} dog.",
          "I want a {energy} {size} dog.",
          1234567890.0987654321
        ]
      },
      "invoke_temperament_energy": {
        "slots": ["temperament", "energy"],
        "utterances": [
          "I want a {temperament} {energy} dog.",
          "I want a {energy} {temperament} dog.",
          1234567890.0987654321
        ]
      },
      "invoke_size_energy_temperament": {
        "slots": ["size", "energy", "temperament"],
        "utterances": [
          "I want a {size} {temperament} {energy} dog.",
          "I want a {size} {energy} {temperament} dog.",
          "I want a {energy} {temperament} {size} dog.",
          "I want a {energy} {size} {temperament} dog.",
          "I want a {temperament} {energy} {size} dog.",
          "I want a {temperament} {size} {energy} dog.",
          1234567890.0987654321
        ]
      },
      "invoke_getDesc_result": {
        "slots": [],
        "utterances": [
          "What's that",
          "What is that",
          "What is it",
          "What",
          "Tell me about that",
          1234567890.0987654321
        ]
      }
    },
    "Dialogs": {
      "dialog0": [
        {
          "user": "I want a large family dog.",
          "alexa": "Do you prefer low, normal, or high energy dogs?"
        },
        {
          "user": "Low",
          "alexa": "Okay! In that case I recommend a chihuahua"
        }
      ],
      "dialog1": [
        {
          "user": "I want a large dog with high energy.",
          "alexa": "Do you want a dog that is good with family or better at guarding?"
        },
        {
          "user": "Family",
          "alexa": "Okay! In that case I recommend a chihuahua"
        },
        {
          "user": "What is that",
          "alexa": "A chihuahua is..."
        }
      ],
      "dialog2": [
        {
          "user": "I want a family dog with high energy.",
          "alexa": "Do you prefer tiny, small, regular, or large dogs?"
        },
        {
          "user": "Large",
          "alexa": "Okay! In that case I recommend a chihuahua"
        }
      ],
      "dialog3": [
        {
          "user": "I want a large high energy guard dog.",
          "alexa": "Okay! In that case I recommend a chihuahua"
        }
      ],
      "dialog4": [
        {
          "user": "I want a large dog.",
          "alexa": "Do you prefer low, normal, or high energy dogs?"
        },
        {
          "user": "Low",
          "alexa": "Do you prefer a family dog or a guard dog?"
        },
        {
          "user": "Guard",
          "alexa": "Okay! In that case I recommend a chihuahua"
        }
      ]
    }
  }
}
